#pragma kernel CSMain

const int MAX_FORCAST_COUNT = 10000;

// 車の総数
uint count;

// 車の静的情報
struct CarS
{
	float3 size;
	float4 col;
};

// 車の動的情報
struct CarD
{
	float2 pos;
	float2 dir;
	float velocity;
};

// 前回の更新からの経過時間
float DeltaTime;

// 車の構造化バッファ
StructuredBuffer<CarS> CarsStatic;
RWStructuredBuffer<CarD> CarsDynamic;

// 2Dベクトル外積
inline float cross2d(float2 a, float2 b) 
{
  return a.x * b.y - a.y * b.x;
}

// 2Dベクトル内積
inline float dot2d(float2 a, float2 b) 
{
  return a.x * b.x + a.y * b.y;
}

// 2Dベクトル回転
inline float2 rotate2d(in float2 v2d, in float2x2 mat)
{
  return mul(v2d, mat);
}

// 指定方向に最も張り出した頂点の距離から、最大衝突距離を計算する
inline void GetSafeDistance(in CarS carS, in CarD carD, in float2 diffPosNml, out float distance){
  // Y軸回転の行列を作る
  float sina = cross2d(carD.dir, diffPosNml);
  float cosa = dot2d(carD.dir, diffPosNml);
  float2x2 _matrix = float2x2(cosa, -sina, sina, cosa);
  
  // 車の四方の頂点を評価して、最大値を保存する
  float2 vert = carS.size.xz * 0.5; // (x,y)
  // dir は (1,0) が進行方向になっているので、回転後のy座標が diffPosNml との内積に等しい
  distance = rotate2d(vert, _matrix).y;
  vert *= -1; // (-x,-y)
  distance = max(distance, rotate2d(vert, _matrix).y);
  vert.x *= -1; // (x,-y)
  distance = max(distance, rotate2d(vert, _matrix).y);
  vert *= -1; // (-x,y)
  distance = max(distance, rotate2d(vert, _matrix).y);  
}

// 最も衝突の可能性の高い車のid(index)を返す
inline void FindMostDangerCar(in uint id1, in uint id2, inout float timeMin, inout uint idMin)
{	
  if(timeMin <= 0) return; // 時すでに遅し

  CarD carD1 = CarsDynamic[id1];
  CarD carD2 = CarsDynamic[id2];
  // 相対位置ベクトル
  float2 diffPos = carD2.pos - carD1.pos;
  // 相対速度ベクトル
  float2 diffVel = carD2.velocity - carD1.velocity;

  float dotPosAndVel = dot2d(diffPos,diffVel);
  // 内積が０以下なら衝突の可能性なし！
  if(dotPosAndVel < 0) return;

  float absVel = length(diffVel);
  if(absVel == 0) return; // 接近していない

  float countAssume = dotPosAndVel / absVel;
  //if(countAssume > MAX_FORCAST_COUNT) return; // 遠い未来過ぎるので無視

  // 二つの車のサイズを考慮した距離を求める
  CarS carS1 = CarsStatic[id1];
  CarS carS2 = CarsStatic[id2];
  float2 diffPosNml = normalize(diffPos);
  float d1,d2;
  GetSafeDistance(carS1, carD1, diffPosNml, d1);
  GetSafeDistance(carS2, carD2, -diffPosNml, d2);
  float distance = d1 + d2;

  // 最接近点での距離が二つの車のサイズを考慮した距離以上なら衝突しない
  float crossPosAndVel = abs(cross2d(diffPos,diffVel));
  if(crossPosAndVel > distance) return;
  
  // このままだと近い将来衝突しそう

  float t = (dotPosAndVel - distance) / absVel;
  if(t > timeMin) return; // もっと近い相手が既にいる

  // 最小値更新
  timeMin = t;
  idMin = id2;
}

// (8, 1, 1)のスレッドで回す
[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
  uint idMin = id.x;
  int timeMin = 1000; // このままだとあと何回で衝突するか
  for(uint i; i < count; i++) {
    if(i == id.x) continue;
    FindMostDangerCar(id.x, i, timeMin, idMin);
  }

  CarD carD = CarsDynamic[id.x];
	CarS carS = CarsStatic[id.x];

  if(idMin == id.x) { // 衝突の可能性の高い車はない
    if(carD.velocity < 60) {
      carD.velocity += 1;
    }
  }
  else {
    if(carD.velocity > 0) {
      carD.velocity -= saturate(10/timeMin) * 2;
    }
  }

  // それぞれの位置情報に移動ベクトルを加算　(0.28はkm/hをm/sに変換する係数)
  carD.pos += carD.dir * carD.velocity * DeltaTime * 0.28;
  CarsDynamic[id.x] = carD;
}
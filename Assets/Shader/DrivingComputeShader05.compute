#pragma kernel CSMain

const float MAX_FORCAST_COUNT = 100000.0;

// 車の総数
uint count;

// 車の静的情報
struct CarS
{
	float3 size;
	float4 col;
  float idealVelocity;
  float mobility;
};

// 車の動的情報
struct CarD
{
	float2 pos;
	float2 dir;
	float velocity;
  int lane;
  int colider; 
};

// 前回の更新からの経過時間
float DeltaTime;

// 車の構造化バッファ
StructuredBuffer<CarS> CarsStatic;
RWStructuredBuffer<CarD> CarsDynamic;

// 2Dベクトル外積
inline float cross2d(float2 a, float2 b)
{
  return a.x * b.y - a.y * b.x;
}

// 2Dベクトル内積
inline float dot2d(float2 a, float2 b)
{
  return a.x * b.x + a.y * b.y;
}

// 2Dベクトル回転
inline float2 rotate2d(in float2 v2d, in float2x2 mat)
{
  return mul(v2d, mat);
}

// 最も衝突の可能性の高い車のid(index)を返す
inline void FindMostDangerCar(in uint id1, in uint id2, inout float timeMin, inout uint idMin)
{
  if(timeMin <= 0) return; // 時すでに遅し

  CarD carD1 = CarsDynamic[id1];
  CarD carD2 = CarsDynamic[id2];
  // 別車線は無視
  if (carD1.lane != carD2.lane)
  {
      return;
  }

  // 相対位置ベクトル
  float2 diffPos = carD2.pos - carD1.pos;


  // 背後から接近してくるものは回避しない（相手任せ）
  if (dot2d(carD1.dir, diffPos) <= 0) return;

  // 相対速度ベクトル
  float diffVel = (carD1.velocity - carD2.velocity) * 0.28;
  if(diffVel < 0.00001){
    return; // 接近していない
  }

  float absPos = length(diffPos);
  float countAssume = absPos / diffVel;
  if(countAssume > 100000){
    return; // 遠い未来過ぎるので無視
  }

  // 二つの車のサイズを考慮した距離を求める
  // 同一車線なので基本的に両車の長さの半分を足したもの
  CarS carS1 = CarsStatic[id1];
  CarS carS2 = CarsStatic[id2];
  float distance = (carS1.size.z + carS2.size.z) * 0.5; 
  // どちらかが高速で移動しているなら停止距離には余裕を持つ
  distance += max(carD1.velocity, carD2.velocity) * 0.28f;

  float t = max(0, (absPos - distance) / diffVel);
  // このままだと近い将来衝突しそう
  if(t > timeMin){
    return; // もっと近い相手が既にいる
  }

  // 最小値更新
  timeMin = t;
  idMin = id2;
}

// (8, 1, 1)のスレッドで回す
[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
  uint idMin = id.x;
  int timeMin = 1000; // このままだとあと何回で衝突するか
  
  for(uint i = 0; i < count; i++) {
    if(i == id.x) continue;
    if(CarsStatic[i].size.z == 0) break; // 削除済みのデータ＝末端に到達
    FindMostDangerCar(id.x, i, timeMin, idMin);
  }
  
  CarD carD = CarsDynamic[id.x];
	CarS carS = CarsStatic[id.x];

  if(idMin == id.x) { // 衝突の可能性の高い車はない
    if(carD.velocity < carS.idealVelocity) {
      carD.velocity = min(carD.velocity + carS.mobility, carS.idealVelocity);
    }
  }
  else {
    if(carD.velocity > 0) {
      carD.velocity = max(0,  carD.velocity - carS.mobility * 2.0);
      if( length(CarsDynamic[idMin].pos - carD.pos) < 5 ){
        carD.velocity = 0;
      }
    }
  }

  // それぞれの位置情報に移動ベクトルを加算　(0.28はkm/hをm/sに変換する係数)
  carD.pos += carD.dir * carD.velocity * DeltaTime * 0.28;
  CarsDynamic[id.x] = carD;
}